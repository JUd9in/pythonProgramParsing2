Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment
Rule 5     statement -> operation
Rule 6     statement -> print
Rule 7     statement -> modification
Rule 8     statement -> iF
Rule 9     statement -> whilE
Rule 10    statement -> for
Rule 11    statement -> break
Rule 12    statement -> return
Rule 13    statement -> function
Rule 14    statement -> runfunction
Rule 15    break -> BREAK statements
Rule 16    break -> BREAK
Rule 17    return -> RETURN
Rule 18    for -> FOR ( operation ; condition ; operation ) { statements }
Rule 19    condition -> VARIABLE > VARIABLE
Rule 20    condition -> VARIABLE < VARIABLE
Rule 21    condition -> VARIABLE > NUMBER
Rule 22    condition -> VARIABLE < NUMBER
Rule 23    condition -> VARIABLE < = VARIABLE
Rule 24    condition -> VARIABLE > = VARIABLE
Rule 25    condition -> VARIABLE [ factor ] > VARIABLE
Rule 26    condition -> VARIABLE [ factor ] < VARIABLE
Rule 27    condition -> VARIABLE < VARIABLE AND VARIABLE [ factor ] > VARIABLE
Rule 28    condition -> VARIABLE < VARIABLE AND VARIABLE [ factor ] < = VARIABLE
Rule 29    iF -> IF ( condition ) { statements }
Rule 30    iF -> IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
Rule 31    whilE -> WHILE ( condition ) { statements }
Rule 32    assignment -> VARIABLE = NUMBER
Rule 33    assignment -> VARIABLE = [ sentence ]
Rule 34    modification -> VARIABLE [ factor ] = VARIABLE [ factor ]
Rule 35    modification -> VARIABLE [ factor ] = VARIABLE
Rule 36    operation -> VARIABLE = expression
Rule 37    operation -> VARIABLE + +
Rule 38    operation -> VARIABLE - -
Rule 39    expression -> expression + term
Rule 40    expression -> expression - term
Rule 41    expression -> term
Rule 42    expression -> VARIABLE [ factor ]
Rule 43    expression -> LEN ( term )
Rule 44    term -> term * factor
Rule 45    term -> term / factor
Rule 46    term -> term / / factor
Rule 47    term -> factor
Rule 48    factor -> VARIABLE
Rule 49    factor -> ( expression )
Rule 50    factor -> NUMBER
Rule 51    print -> PRINT ( sentence )
Rule 52    sentence -> word , sentence
Rule 53    sentence -> word
Rule 54    word -> NUMBER
Rule 55    word -> VARIABLE
Rule 56    function -> DEF VARIABLE ( sentence ) { statements }
Rule 57    runfunction -> VARIABLE ( sentence )

Terminals, with rules where they appear

(                    : 18 29 30 30 31 43 49 51 56 57
)                    : 18 29 30 30 31 43 49 51 56 57
*                    : 44
+                    : 37 37 39
,                    : 52
-                    : 38 38 40
/                    : 45 46 46
;                    : 18 18
<                    : 20 22 23 26 27 28 28
=                    : 23 24 28 32 33 34 35 36
>                    : 19 21 24 25 27
AND                  : 27 28
BREAK                : 15 16
DEF                  : 56
ELIF                 : 30
ELSE                 : 30
FOR                  : 18
IF                   : 29 30
LEN                  : 43
NUMBER               : 21 22 32 50 54
PRINT                : 51
RETURN               : 17
VARIABLE             : 19 19 20 20 21 22 23 23 24 24 25 25 26 26 27 27 27 27 28 28 28 28 32 33 34 34 35 35 36 37 38 42 48 55 56 57
WHILE                : 31
[                    : 25 26 27 28 33 34 34 35 42
]                    : 25 26 27 28 33 34 34 35 42
error                : 
{                    : 18 29 30 30 30 31 56
}                    : 18 29 30 30 30 31 56

Nonterminals, with rules where they appear

assignment           : 4
break                : 11
condition            : 18 29 30 30 31
expression           : 36 39 40 49
factor               : 25 26 27 28 34 34 35 42 44 45 46 47
for                  : 10
function             : 13
iF                   : 8
modification         : 7
operation            : 5 18 18
print                : 6
program              : 0
return               : 12
runfunction          : 14
sentence             : 33 51 52 56 57
statement            : 2 3
statements           : 1 2 15 18 29 30 30 30 31 56
term                 : 39 40 41 43 44 45 46
whilE                : 9
word                 : 52 53

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . modification
    (8) statement -> . iF
    (9) statement -> . whilE
    (10) statement -> . for
    (11) statement -> . break
    (12) statement -> . return
    (13) statement -> . function
    (14) statement -> . runfunction
    (32) assignment -> . VARIABLE = NUMBER
    (33) assignment -> . VARIABLE = [ sentence ]
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -
    (51) print -> . PRINT ( sentence )
    (34) modification -> . VARIABLE [ factor ] = VARIABLE [ factor ]
    (35) modification -> . VARIABLE [ factor ] = VARIABLE
    (29) iF -> . IF ( condition ) { statements }
    (30) iF -> . IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
    (31) whilE -> . WHILE ( condition ) { statements }
    (18) for -> . FOR ( operation ; condition ; operation ) { statements }
    (15) break -> . BREAK statements
    (16) break -> . BREAK
    (17) return -> . RETURN
    (56) function -> . DEF VARIABLE ( sentence ) { statements }
    (57) runfunction -> . VARIABLE ( sentence )

    VARIABLE        shift and go to state 15
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    DEF             shift and go to state 22

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    modification                   shift and go to state 7
    iF                             shift and go to state 8
    whilE                          shift and go to state 9
    for                            shift and go to state 10
    break                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    runfunction                    shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . modification
    (8) statement -> . iF
    (9) statement -> . whilE
    (10) statement -> . for
    (11) statement -> . break
    (12) statement -> . return
    (13) statement -> . function
    (14) statement -> . runfunction
    (32) assignment -> . VARIABLE = NUMBER
    (33) assignment -> . VARIABLE = [ sentence ]
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -
    (51) print -> . PRINT ( sentence )
    (34) modification -> . VARIABLE [ factor ] = VARIABLE [ factor ]
    (35) modification -> . VARIABLE [ factor ] = VARIABLE
    (29) iF -> . IF ( condition ) { statements }
    (30) iF -> . IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
    (31) whilE -> . WHILE ( condition ) { statements }
    (18) for -> . FOR ( operation ; condition ; operation ) { statements }
    (15) break -> . BREAK statements
    (16) break -> . BREAK
    (17) return -> . RETURN
    (56) function -> . DEF VARIABLE ( sentence ) { statements }
    (57) runfunction -> . VARIABLE ( sentence )

    $end            reduce using rule 1 (program -> statements .)
    VARIABLE        shift and go to state 15
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    DEF             shift and go to state 22

    statement                      shift and go to state 23
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    modification                   shift and go to state 7
    iF                             shift and go to state 8
    whilE                          shift and go to state 9
    for                            shift and go to state 10
    break                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    runfunction                    shift and go to state 14

state 3

    (3) statements -> statement .

    VARIABLE        reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    BREAK           reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    DEF             reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    }               reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> assignment .

    VARIABLE        reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    FOR             reduce using rule 4 (statement -> assignment .)
    BREAK           reduce using rule 4 (statement -> assignment .)
    RETURN          reduce using rule 4 (statement -> assignment .)
    DEF             reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    }               reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> operation .

    VARIABLE        reduce using rule 5 (statement -> operation .)
    PRINT           reduce using rule 5 (statement -> operation .)
    IF              reduce using rule 5 (statement -> operation .)
    WHILE           reduce using rule 5 (statement -> operation .)
    FOR             reduce using rule 5 (statement -> operation .)
    BREAK           reduce using rule 5 (statement -> operation .)
    RETURN          reduce using rule 5 (statement -> operation .)
    DEF             reduce using rule 5 (statement -> operation .)
    $end            reduce using rule 5 (statement -> operation .)
    }               reduce using rule 5 (statement -> operation .)


state 6

    (6) statement -> print .

    VARIABLE        reduce using rule 6 (statement -> print .)
    PRINT           reduce using rule 6 (statement -> print .)
    IF              reduce using rule 6 (statement -> print .)
    WHILE           reduce using rule 6 (statement -> print .)
    FOR             reduce using rule 6 (statement -> print .)
    BREAK           reduce using rule 6 (statement -> print .)
    RETURN          reduce using rule 6 (statement -> print .)
    DEF             reduce using rule 6 (statement -> print .)
    $end            reduce using rule 6 (statement -> print .)
    }               reduce using rule 6 (statement -> print .)


state 7

    (7) statement -> modification .

    VARIABLE        reduce using rule 7 (statement -> modification .)
    PRINT           reduce using rule 7 (statement -> modification .)
    IF              reduce using rule 7 (statement -> modification .)
    WHILE           reduce using rule 7 (statement -> modification .)
    FOR             reduce using rule 7 (statement -> modification .)
    BREAK           reduce using rule 7 (statement -> modification .)
    RETURN          reduce using rule 7 (statement -> modification .)
    DEF             reduce using rule 7 (statement -> modification .)
    $end            reduce using rule 7 (statement -> modification .)
    }               reduce using rule 7 (statement -> modification .)


state 8

    (8) statement -> iF .

    VARIABLE        reduce using rule 8 (statement -> iF .)
    PRINT           reduce using rule 8 (statement -> iF .)
    IF              reduce using rule 8 (statement -> iF .)
    WHILE           reduce using rule 8 (statement -> iF .)
    FOR             reduce using rule 8 (statement -> iF .)
    BREAK           reduce using rule 8 (statement -> iF .)
    RETURN          reduce using rule 8 (statement -> iF .)
    DEF             reduce using rule 8 (statement -> iF .)
    $end            reduce using rule 8 (statement -> iF .)
    }               reduce using rule 8 (statement -> iF .)


state 9

    (9) statement -> whilE .

    VARIABLE        reduce using rule 9 (statement -> whilE .)
    PRINT           reduce using rule 9 (statement -> whilE .)
    IF              reduce using rule 9 (statement -> whilE .)
    WHILE           reduce using rule 9 (statement -> whilE .)
    FOR             reduce using rule 9 (statement -> whilE .)
    BREAK           reduce using rule 9 (statement -> whilE .)
    RETURN          reduce using rule 9 (statement -> whilE .)
    DEF             reduce using rule 9 (statement -> whilE .)
    $end            reduce using rule 9 (statement -> whilE .)
    }               reduce using rule 9 (statement -> whilE .)


state 10

    (10) statement -> for .

    VARIABLE        reduce using rule 10 (statement -> for .)
    PRINT           reduce using rule 10 (statement -> for .)
    IF              reduce using rule 10 (statement -> for .)
    WHILE           reduce using rule 10 (statement -> for .)
    FOR             reduce using rule 10 (statement -> for .)
    BREAK           reduce using rule 10 (statement -> for .)
    RETURN          reduce using rule 10 (statement -> for .)
    DEF             reduce using rule 10 (statement -> for .)
    $end            reduce using rule 10 (statement -> for .)
    }               reduce using rule 10 (statement -> for .)


state 11

    (11) statement -> break .

    VARIABLE        reduce using rule 11 (statement -> break .)
    PRINT           reduce using rule 11 (statement -> break .)
    IF              reduce using rule 11 (statement -> break .)
    WHILE           reduce using rule 11 (statement -> break .)
    FOR             reduce using rule 11 (statement -> break .)
    BREAK           reduce using rule 11 (statement -> break .)
    RETURN          reduce using rule 11 (statement -> break .)
    DEF             reduce using rule 11 (statement -> break .)
    $end            reduce using rule 11 (statement -> break .)
    }               reduce using rule 11 (statement -> break .)


state 12

    (12) statement -> return .

    VARIABLE        reduce using rule 12 (statement -> return .)
    PRINT           reduce using rule 12 (statement -> return .)
    IF              reduce using rule 12 (statement -> return .)
    WHILE           reduce using rule 12 (statement -> return .)
    FOR             reduce using rule 12 (statement -> return .)
    BREAK           reduce using rule 12 (statement -> return .)
    RETURN          reduce using rule 12 (statement -> return .)
    DEF             reduce using rule 12 (statement -> return .)
    $end            reduce using rule 12 (statement -> return .)
    }               reduce using rule 12 (statement -> return .)


state 13

    (13) statement -> function .

    VARIABLE        reduce using rule 13 (statement -> function .)
    PRINT           reduce using rule 13 (statement -> function .)
    IF              reduce using rule 13 (statement -> function .)
    WHILE           reduce using rule 13 (statement -> function .)
    FOR             reduce using rule 13 (statement -> function .)
    BREAK           reduce using rule 13 (statement -> function .)
    RETURN          reduce using rule 13 (statement -> function .)
    DEF             reduce using rule 13 (statement -> function .)
    $end            reduce using rule 13 (statement -> function .)
    }               reduce using rule 13 (statement -> function .)


state 14

    (14) statement -> runfunction .

    VARIABLE        reduce using rule 14 (statement -> runfunction .)
    PRINT           reduce using rule 14 (statement -> runfunction .)
    IF              reduce using rule 14 (statement -> runfunction .)
    WHILE           reduce using rule 14 (statement -> runfunction .)
    FOR             reduce using rule 14 (statement -> runfunction .)
    BREAK           reduce using rule 14 (statement -> runfunction .)
    RETURN          reduce using rule 14 (statement -> runfunction .)
    DEF             reduce using rule 14 (statement -> runfunction .)
    $end            reduce using rule 14 (statement -> runfunction .)
    }               reduce using rule 14 (statement -> runfunction .)


state 15

    (32) assignment -> VARIABLE . = NUMBER
    (33) assignment -> VARIABLE . = [ sentence ]
    (36) operation -> VARIABLE . = expression
    (37) operation -> VARIABLE . + +
    (38) operation -> VARIABLE . - -
    (34) modification -> VARIABLE . [ factor ] = VARIABLE [ factor ]
    (35) modification -> VARIABLE . [ factor ] = VARIABLE
    (57) runfunction -> VARIABLE . ( sentence )

    =               shift and go to state 24
    +               shift and go to state 26
    -               shift and go to state 27
    [               shift and go to state 25
    (               shift and go to state 28


state 16

    (51) print -> PRINT . ( sentence )

    (               shift and go to state 29


state 17

    (29) iF -> IF . ( condition ) { statements }
    (30) iF -> IF . ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }

    (               shift and go to state 30


state 18

    (31) whilE -> WHILE . ( condition ) { statements }

    (               shift and go to state 31


state 19

    (18) for -> FOR . ( operation ; condition ; operation ) { statements }

    (               shift and go to state 32


state 20

    (15) break -> BREAK . statements
    (16) break -> BREAK .
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . modification
    (8) statement -> . iF
    (9) statement -> . whilE
    (10) statement -> . for
    (11) statement -> . break
    (12) statement -> . return
    (13) statement -> . function
    (14) statement -> . runfunction
    (32) assignment -> . VARIABLE = NUMBER
    (33) assignment -> . VARIABLE = [ sentence ]
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -
    (51) print -> . PRINT ( sentence )
    (34) modification -> . VARIABLE [ factor ] = VARIABLE [ factor ]
    (35) modification -> . VARIABLE [ factor ] = VARIABLE
    (29) iF -> . IF ( condition ) { statements }
    (30) iF -> . IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
    (31) whilE -> . WHILE ( condition ) { statements }
    (18) for -> . FOR ( operation ; condition ; operation ) { statements }
    (15) break -> . BREAK statements
    (16) break -> . BREAK
    (17) return -> . RETURN
    (56) function -> . DEF VARIABLE ( sentence ) { statements }
    (57) runfunction -> . VARIABLE ( sentence )

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
    $end            reduce using rule 16 (break -> BREAK .)
    }               reduce using rule 16 (break -> BREAK .)
    VARIABLE        shift and go to state 15
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    DEF             shift and go to state 22

  ! VARIABLE        [ reduce using rule 16 (break -> BREAK .) ]
  ! PRINT           [ reduce using rule 16 (break -> BREAK .) ]
  ! IF              [ reduce using rule 16 (break -> BREAK .) ]
  ! WHILE           [ reduce using rule 16 (break -> BREAK .) ]
  ! FOR             [ reduce using rule 16 (break -> BREAK .) ]
  ! BREAK           [ reduce using rule 16 (break -> BREAK .) ]
  ! RETURN          [ reduce using rule 16 (break -> BREAK .) ]
  ! DEF             [ reduce using rule 16 (break -> BREAK .) ]

    statements                     shift and go to state 33
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    modification                   shift and go to state 7
    iF                             shift and go to state 8
    whilE                          shift and go to state 9
    for                            shift and go to state 10
    break                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    runfunction                    shift and go to state 14

state 21

    (17) return -> RETURN .

    VARIABLE        reduce using rule 17 (return -> RETURN .)
    PRINT           reduce using rule 17 (return -> RETURN .)
    IF              reduce using rule 17 (return -> RETURN .)
    WHILE           reduce using rule 17 (return -> RETURN .)
    FOR             reduce using rule 17 (return -> RETURN .)
    BREAK           reduce using rule 17 (return -> RETURN .)
    RETURN          reduce using rule 17 (return -> RETURN .)
    DEF             reduce using rule 17 (return -> RETURN .)
    $end            reduce using rule 17 (return -> RETURN .)
    }               reduce using rule 17 (return -> RETURN .)


state 22

    (56) function -> DEF . VARIABLE ( sentence ) { statements }

    VARIABLE        shift and go to state 34


state 23

    (2) statements -> statements statement .

    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    BREAK           reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    DEF             reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    }               reduce using rule 2 (statements -> statements statement .)


state 24

    (32) assignment -> VARIABLE = . NUMBER
    (33) assignment -> VARIABLE = . [ sentence ]
    (36) operation -> VARIABLE = . expression
    (39) expression -> . expression + term
    (40) expression -> . expression - term
    (41) expression -> . term
    (42) expression -> . VARIABLE [ factor ]
    (43) expression -> . LEN ( term )
    (44) term -> . term * factor
    (45) term -> . term / factor
    (46) term -> . term / / factor
    (47) term -> . factor
    (48) factor -> . VARIABLE
    (49) factor -> . ( expression )
    (50) factor -> . NUMBER

    NUMBER          shift and go to state 36
    [               shift and go to state 37
    VARIABLE        shift and go to state 35
    LEN             shift and go to state 41
    (               shift and go to state 42

    expression                     shift and go to state 38
    term                           shift and go to state 39
    factor                         shift and go to state 40

state 25

    (34) modification -> VARIABLE [ . factor ] = VARIABLE [ factor ]
    (35) modification -> VARIABLE [ . factor ] = VARIABLE
    (48) factor -> . VARIABLE
    (49) factor -> . ( expression )
    (50) factor -> . NUMBER

    VARIABLE        shift and go to state 43
    (               shift and go to state 42
    NUMBER          shift and go to state 45

    factor                         shift and go to state 44

state 26

    (37) operation -> VARIABLE + . +

    +               shift and go to state 46


state 27

    (38) operation -> VARIABLE - . -

    -               shift and go to state 47


state 28

    (57) runfunction -> VARIABLE ( . sentence )
    (52) sentence -> . word , sentence
    (53) sentence -> . word
    (54) word -> . NUMBER
    (55) word -> . VARIABLE

    NUMBER          shift and go to state 51
    VARIABLE        shift and go to state 48

    sentence                       shift and go to state 49
    word                           shift and go to state 50

state 29

    (51) print -> PRINT ( . sentence )
    (52) sentence -> . word , sentence
    (53) sentence -> . word
    (54) word -> . NUMBER
    (55) word -> . VARIABLE

    NUMBER          shift and go to state 51
    VARIABLE        shift and go to state 48

    sentence                       shift and go to state 52
    word                           shift and go to state 50

state 30

    (29) iF -> IF ( . condition ) { statements }
    (30) iF -> IF ( . condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
    (19) condition -> . VARIABLE > VARIABLE
    (20) condition -> . VARIABLE < VARIABLE
    (21) condition -> . VARIABLE > NUMBER
    (22) condition -> . VARIABLE < NUMBER
    (23) condition -> . VARIABLE < = VARIABLE
    (24) condition -> . VARIABLE > = VARIABLE
    (25) condition -> . VARIABLE [ factor ] > VARIABLE
    (26) condition -> . VARIABLE [ factor ] < VARIABLE
    (27) condition -> . VARIABLE < VARIABLE AND VARIABLE [ factor ] > VARIABLE
    (28) condition -> . VARIABLE < VARIABLE AND VARIABLE [ factor ] < = VARIABLE

    VARIABLE        shift and go to state 54

    condition                      shift and go to state 53

state 31

    (31) whilE -> WHILE ( . condition ) { statements }
    (19) condition -> . VARIABLE > VARIABLE
    (20) condition -> . VARIABLE < VARIABLE
    (21) condition -> . VARIABLE > NUMBER
    (22) condition -> . VARIABLE < NUMBER
    (23) condition -> . VARIABLE < = VARIABLE
    (24) condition -> . VARIABLE > = VARIABLE
    (25) condition -> . VARIABLE [ factor ] > VARIABLE
    (26) condition -> . VARIABLE [ factor ] < VARIABLE
    (27) condition -> . VARIABLE < VARIABLE AND VARIABLE [ factor ] > VARIABLE
    (28) condition -> . VARIABLE < VARIABLE AND VARIABLE [ factor ] < = VARIABLE

    VARIABLE        shift and go to state 54

    condition                      shift and go to state 55

state 32

    (18) for -> FOR ( . operation ; condition ; operation ) { statements }
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -

    VARIABLE        shift and go to state 57

    operation                      shift and go to state 56

state 33

    (15) break -> BREAK statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . modification
    (8) statement -> . iF
    (9) statement -> . whilE
    (10) statement -> . for
    (11) statement -> . break
    (12) statement -> . return
    (13) statement -> . function
    (14) statement -> . runfunction
    (32) assignment -> . VARIABLE = NUMBER
    (33) assignment -> . VARIABLE = [ sentence ]
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -
    (51) print -> . PRINT ( sentence )
    (34) modification -> . VARIABLE [ factor ] = VARIABLE [ factor ]
    (35) modification -> . VARIABLE [ factor ] = VARIABLE
    (29) iF -> . IF ( condition ) { statements }
    (30) iF -> . IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
    (31) whilE -> . WHILE ( condition ) { statements }
    (18) for -> . FOR ( operation ; condition ; operation ) { statements }
    (15) break -> . BREAK statements
    (16) break -> . BREAK
    (17) return -> . RETURN
    (56) function -> . DEF VARIABLE ( sentence ) { statements }
    (57) runfunction -> . VARIABLE ( sentence )

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
    $end            reduce using rule 15 (break -> BREAK statements .)
    }               reduce using rule 15 (break -> BREAK statements .)
    VARIABLE        shift and go to state 15
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    DEF             shift and go to state 22

  ! VARIABLE        [ reduce using rule 15 (break -> BREAK statements .) ]
  ! PRINT           [ reduce using rule 15 (break -> BREAK statements .) ]
  ! IF              [ reduce using rule 15 (break -> BREAK statements .) ]
  ! WHILE           [ reduce using rule 15 (break -> BREAK statements .) ]
  ! FOR             [ reduce using rule 15 (break -> BREAK statements .) ]
  ! BREAK           [ reduce using rule 15 (break -> BREAK statements .) ]
  ! RETURN          [ reduce using rule 15 (break -> BREAK statements .) ]
  ! DEF             [ reduce using rule 15 (break -> BREAK statements .) ]

    statement                      shift and go to state 23
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    modification                   shift and go to state 7
    iF                             shift and go to state 8
    whilE                          shift and go to state 9
    for                            shift and go to state 10
    break                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    runfunction                    shift and go to state 14

state 34

    (56) function -> DEF VARIABLE . ( sentence ) { statements }

    (               shift and go to state 58


state 35

    (42) expression -> VARIABLE . [ factor ]
    (48) factor -> VARIABLE .

    [               shift and go to state 59
    *               reduce using rule 48 (factor -> VARIABLE .)
    /               reduce using rule 48 (factor -> VARIABLE .)
    +               reduce using rule 48 (factor -> VARIABLE .)
    -               reduce using rule 48 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 48 (factor -> VARIABLE .)
    PRINT           reduce using rule 48 (factor -> VARIABLE .)
    IF              reduce using rule 48 (factor -> VARIABLE .)
    WHILE           reduce using rule 48 (factor -> VARIABLE .)
    FOR             reduce using rule 48 (factor -> VARIABLE .)
    BREAK           reduce using rule 48 (factor -> VARIABLE .)
    RETURN          reduce using rule 48 (factor -> VARIABLE .)
    DEF             reduce using rule 48 (factor -> VARIABLE .)
    $end            reduce using rule 48 (factor -> VARIABLE .)
    }               reduce using rule 48 (factor -> VARIABLE .)
    )               reduce using rule 48 (factor -> VARIABLE .)
    ;               reduce using rule 48 (factor -> VARIABLE .)


state 36

    (32) assignment -> VARIABLE = NUMBER .
    (50) factor -> NUMBER .

  ! reduce/reduce conflict for VARIABLE resolved using rule 32 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for PRINT resolved using rule 32 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 32 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for WHILE resolved using rule 32 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for FOR resolved using rule 32 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for BREAK resolved using rule 32 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for RETURN resolved using rule 32 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for DEF resolved using rule 32 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 32 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for } resolved using rule 32 (assignment -> VARIABLE = NUMBER .)
    VARIABLE        reduce using rule 32 (assignment -> VARIABLE = NUMBER .)
    PRINT           reduce using rule 32 (assignment -> VARIABLE = NUMBER .)
    IF              reduce using rule 32 (assignment -> VARIABLE = NUMBER .)
    WHILE           reduce using rule 32 (assignment -> VARIABLE = NUMBER .)
    FOR             reduce using rule 32 (assignment -> VARIABLE = NUMBER .)
    BREAK           reduce using rule 32 (assignment -> VARIABLE = NUMBER .)
    RETURN          reduce using rule 32 (assignment -> VARIABLE = NUMBER .)
    DEF             reduce using rule 32 (assignment -> VARIABLE = NUMBER .)
    $end            reduce using rule 32 (assignment -> VARIABLE = NUMBER .)
    }               reduce using rule 32 (assignment -> VARIABLE = NUMBER .)
    *               reduce using rule 50 (factor -> NUMBER .)
    /               reduce using rule 50 (factor -> NUMBER .)
    +               reduce using rule 50 (factor -> NUMBER .)
    -               reduce using rule 50 (factor -> NUMBER .)

  ! VARIABLE        [ reduce using rule 50 (factor -> NUMBER .) ]
  ! PRINT           [ reduce using rule 50 (factor -> NUMBER .) ]
  ! IF              [ reduce using rule 50 (factor -> NUMBER .) ]
  ! WHILE           [ reduce using rule 50 (factor -> NUMBER .) ]
  ! FOR             [ reduce using rule 50 (factor -> NUMBER .) ]
  ! BREAK           [ reduce using rule 50 (factor -> NUMBER .) ]
  ! RETURN          [ reduce using rule 50 (factor -> NUMBER .) ]
  ! DEF             [ reduce using rule 50 (factor -> NUMBER .) ]
  ! $end            [ reduce using rule 50 (factor -> NUMBER .) ]
  ! }               [ reduce using rule 50 (factor -> NUMBER .) ]


state 37

    (33) assignment -> VARIABLE = [ . sentence ]
    (52) sentence -> . word , sentence
    (53) sentence -> . word
    (54) word -> . NUMBER
    (55) word -> . VARIABLE

    NUMBER          shift and go to state 51
    VARIABLE        shift and go to state 48

    sentence                       shift and go to state 60
    word                           shift and go to state 50

state 38

    (36) operation -> VARIABLE = expression .
    (39) expression -> expression . + term
    (40) expression -> expression . - term

    VARIABLE        reduce using rule 36 (operation -> VARIABLE = expression .)
    PRINT           reduce using rule 36 (operation -> VARIABLE = expression .)
    IF              reduce using rule 36 (operation -> VARIABLE = expression .)
    WHILE           reduce using rule 36 (operation -> VARIABLE = expression .)
    FOR             reduce using rule 36 (operation -> VARIABLE = expression .)
    BREAK           reduce using rule 36 (operation -> VARIABLE = expression .)
    RETURN          reduce using rule 36 (operation -> VARIABLE = expression .)
    DEF             reduce using rule 36 (operation -> VARIABLE = expression .)
    $end            reduce using rule 36 (operation -> VARIABLE = expression .)
    }               reduce using rule 36 (operation -> VARIABLE = expression .)
    ;               reduce using rule 36 (operation -> VARIABLE = expression .)
    )               reduce using rule 36 (operation -> VARIABLE = expression .)
    +               shift and go to state 61
    -               shift and go to state 62


state 39

    (41) expression -> term .
    (44) term -> term . * factor
    (45) term -> term . / factor
    (46) term -> term . / / factor

    +               reduce using rule 41 (expression -> term .)
    -               reduce using rule 41 (expression -> term .)
    VARIABLE        reduce using rule 41 (expression -> term .)
    PRINT           reduce using rule 41 (expression -> term .)
    IF              reduce using rule 41 (expression -> term .)
    WHILE           reduce using rule 41 (expression -> term .)
    FOR             reduce using rule 41 (expression -> term .)
    BREAK           reduce using rule 41 (expression -> term .)
    RETURN          reduce using rule 41 (expression -> term .)
    DEF             reduce using rule 41 (expression -> term .)
    $end            reduce using rule 41 (expression -> term .)
    }               reduce using rule 41 (expression -> term .)
    )               reduce using rule 41 (expression -> term .)
    ;               reduce using rule 41 (expression -> term .)
    *               shift and go to state 63
    /               shift and go to state 64


state 40

    (47) term -> factor .

    *               reduce using rule 47 (term -> factor .)
    /               reduce using rule 47 (term -> factor .)
    +               reduce using rule 47 (term -> factor .)
    -               reduce using rule 47 (term -> factor .)
    VARIABLE        reduce using rule 47 (term -> factor .)
    PRINT           reduce using rule 47 (term -> factor .)
    IF              reduce using rule 47 (term -> factor .)
    WHILE           reduce using rule 47 (term -> factor .)
    FOR             reduce using rule 47 (term -> factor .)
    BREAK           reduce using rule 47 (term -> factor .)
    RETURN          reduce using rule 47 (term -> factor .)
    DEF             reduce using rule 47 (term -> factor .)
    $end            reduce using rule 47 (term -> factor .)
    }               reduce using rule 47 (term -> factor .)
    )               reduce using rule 47 (term -> factor .)
    ;               reduce using rule 47 (term -> factor .)


state 41

    (43) expression -> LEN . ( term )

    (               shift and go to state 65


state 42

    (49) factor -> ( . expression )
    (39) expression -> . expression + term
    (40) expression -> . expression - term
    (41) expression -> . term
    (42) expression -> . VARIABLE [ factor ]
    (43) expression -> . LEN ( term )
    (44) term -> . term * factor
    (45) term -> . term / factor
    (46) term -> . term / / factor
    (47) term -> . factor
    (48) factor -> . VARIABLE
    (49) factor -> . ( expression )
    (50) factor -> . NUMBER

    VARIABLE        shift and go to state 35
    LEN             shift and go to state 41
    (               shift and go to state 42
    NUMBER          shift and go to state 45

    expression                     shift and go to state 66
    term                           shift and go to state 39
    factor                         shift and go to state 40

state 43

    (48) factor -> VARIABLE .

    ]               reduce using rule 48 (factor -> VARIABLE .)
    *               reduce using rule 48 (factor -> VARIABLE .)
    /               reduce using rule 48 (factor -> VARIABLE .)
    +               reduce using rule 48 (factor -> VARIABLE .)
    -               reduce using rule 48 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 48 (factor -> VARIABLE .)
    PRINT           reduce using rule 48 (factor -> VARIABLE .)
    IF              reduce using rule 48 (factor -> VARIABLE .)
    WHILE           reduce using rule 48 (factor -> VARIABLE .)
    FOR             reduce using rule 48 (factor -> VARIABLE .)
    BREAK           reduce using rule 48 (factor -> VARIABLE .)
    RETURN          reduce using rule 48 (factor -> VARIABLE .)
    DEF             reduce using rule 48 (factor -> VARIABLE .)
    $end            reduce using rule 48 (factor -> VARIABLE .)
    }               reduce using rule 48 (factor -> VARIABLE .)
    )               reduce using rule 48 (factor -> VARIABLE .)
    ;               reduce using rule 48 (factor -> VARIABLE .)


state 44

    (34) modification -> VARIABLE [ factor . ] = VARIABLE [ factor ]
    (35) modification -> VARIABLE [ factor . ] = VARIABLE

    ]               shift and go to state 67


state 45

    (50) factor -> NUMBER .

    ]               reduce using rule 50 (factor -> NUMBER .)
    *               reduce using rule 50 (factor -> NUMBER .)
    /               reduce using rule 50 (factor -> NUMBER .)
    )               reduce using rule 50 (factor -> NUMBER .)
    +               reduce using rule 50 (factor -> NUMBER .)
    -               reduce using rule 50 (factor -> NUMBER .)
    VARIABLE        reduce using rule 50 (factor -> NUMBER .)
    PRINT           reduce using rule 50 (factor -> NUMBER .)
    IF              reduce using rule 50 (factor -> NUMBER .)
    WHILE           reduce using rule 50 (factor -> NUMBER .)
    FOR             reduce using rule 50 (factor -> NUMBER .)
    BREAK           reduce using rule 50 (factor -> NUMBER .)
    RETURN          reduce using rule 50 (factor -> NUMBER .)
    DEF             reduce using rule 50 (factor -> NUMBER .)
    $end            reduce using rule 50 (factor -> NUMBER .)
    }               reduce using rule 50 (factor -> NUMBER .)
    ;               reduce using rule 50 (factor -> NUMBER .)


state 46

    (37) operation -> VARIABLE + + .

    VARIABLE        reduce using rule 37 (operation -> VARIABLE + + .)
    PRINT           reduce using rule 37 (operation -> VARIABLE + + .)
    IF              reduce using rule 37 (operation -> VARIABLE + + .)
    WHILE           reduce using rule 37 (operation -> VARIABLE + + .)
    FOR             reduce using rule 37 (operation -> VARIABLE + + .)
    BREAK           reduce using rule 37 (operation -> VARIABLE + + .)
    RETURN          reduce using rule 37 (operation -> VARIABLE + + .)
    DEF             reduce using rule 37 (operation -> VARIABLE + + .)
    $end            reduce using rule 37 (operation -> VARIABLE + + .)
    }               reduce using rule 37 (operation -> VARIABLE + + .)
    ;               reduce using rule 37 (operation -> VARIABLE + + .)
    )               reduce using rule 37 (operation -> VARIABLE + + .)


state 47

    (38) operation -> VARIABLE - - .

    VARIABLE        reduce using rule 38 (operation -> VARIABLE - - .)
    PRINT           reduce using rule 38 (operation -> VARIABLE - - .)
    IF              reduce using rule 38 (operation -> VARIABLE - - .)
    WHILE           reduce using rule 38 (operation -> VARIABLE - - .)
    FOR             reduce using rule 38 (operation -> VARIABLE - - .)
    BREAK           reduce using rule 38 (operation -> VARIABLE - - .)
    RETURN          reduce using rule 38 (operation -> VARIABLE - - .)
    DEF             reduce using rule 38 (operation -> VARIABLE - - .)
    $end            reduce using rule 38 (operation -> VARIABLE - - .)
    }               reduce using rule 38 (operation -> VARIABLE - - .)
    ;               reduce using rule 38 (operation -> VARIABLE - - .)
    )               reduce using rule 38 (operation -> VARIABLE - - .)


state 48

    (55) word -> VARIABLE .

    ,               reduce using rule 55 (word -> VARIABLE .)
    )               reduce using rule 55 (word -> VARIABLE .)
    ]               reduce using rule 55 (word -> VARIABLE .)


state 49

    (57) runfunction -> VARIABLE ( sentence . )

    )               shift and go to state 68


state 50

    (52) sentence -> word . , sentence
    (53) sentence -> word .

    ,               shift and go to state 69
    )               reduce using rule 53 (sentence -> word .)
    ]               reduce using rule 53 (sentence -> word .)


state 51

    (54) word -> NUMBER .

    ,               reduce using rule 54 (word -> NUMBER .)
    )               reduce using rule 54 (word -> NUMBER .)
    ]               reduce using rule 54 (word -> NUMBER .)


state 52

    (51) print -> PRINT ( sentence . )

    )               shift and go to state 70


state 53

    (29) iF -> IF ( condition . ) { statements }
    (30) iF -> IF ( condition . ) { statements } ELIF ( condition ) { statements } ELSE { statements }

    )               shift and go to state 71


state 54

    (19) condition -> VARIABLE . > VARIABLE
    (20) condition -> VARIABLE . < VARIABLE
    (21) condition -> VARIABLE . > NUMBER
    (22) condition -> VARIABLE . < NUMBER
    (23) condition -> VARIABLE . < = VARIABLE
    (24) condition -> VARIABLE . > = VARIABLE
    (25) condition -> VARIABLE . [ factor ] > VARIABLE
    (26) condition -> VARIABLE . [ factor ] < VARIABLE
    (27) condition -> VARIABLE . < VARIABLE AND VARIABLE [ factor ] > VARIABLE
    (28) condition -> VARIABLE . < VARIABLE AND VARIABLE [ factor ] < = VARIABLE

    >               shift and go to state 72
    <               shift and go to state 73
    [               shift and go to state 74


state 55

    (31) whilE -> WHILE ( condition . ) { statements }

    )               shift and go to state 75


state 56

    (18) for -> FOR ( operation . ; condition ; operation ) { statements }

    ;               shift and go to state 76


state 57

    (36) operation -> VARIABLE . = expression
    (37) operation -> VARIABLE . + +
    (38) operation -> VARIABLE . - -

    =               shift and go to state 77
    +               shift and go to state 26
    -               shift and go to state 27


state 58

    (56) function -> DEF VARIABLE ( . sentence ) { statements }
    (52) sentence -> . word , sentence
    (53) sentence -> . word
    (54) word -> . NUMBER
    (55) word -> . VARIABLE

    NUMBER          shift and go to state 51
    VARIABLE        shift and go to state 48

    sentence                       shift and go to state 78
    word                           shift and go to state 50

state 59

    (42) expression -> VARIABLE [ . factor ]
    (48) factor -> . VARIABLE
    (49) factor -> . ( expression )
    (50) factor -> . NUMBER

    VARIABLE        shift and go to state 43
    (               shift and go to state 42
    NUMBER          shift and go to state 45

    factor                         shift and go to state 79

state 60

    (33) assignment -> VARIABLE = [ sentence . ]

    ]               shift and go to state 80


state 61

    (39) expression -> expression + . term
    (44) term -> . term * factor
    (45) term -> . term / factor
    (46) term -> . term / / factor
    (47) term -> . factor
    (48) factor -> . VARIABLE
    (49) factor -> . ( expression )
    (50) factor -> . NUMBER

    VARIABLE        shift and go to state 43
    (               shift and go to state 42
    NUMBER          shift and go to state 45

    term                           shift and go to state 81
    factor                         shift and go to state 40

state 62

    (40) expression -> expression - . term
    (44) term -> . term * factor
    (45) term -> . term / factor
    (46) term -> . term / / factor
    (47) term -> . factor
    (48) factor -> . VARIABLE
    (49) factor -> . ( expression )
    (50) factor -> . NUMBER

    VARIABLE        shift and go to state 43
    (               shift and go to state 42
    NUMBER          shift and go to state 45

    term                           shift and go to state 82
    factor                         shift and go to state 40

state 63

    (44) term -> term * . factor
    (48) factor -> . VARIABLE
    (49) factor -> . ( expression )
    (50) factor -> . NUMBER

    VARIABLE        shift and go to state 43
    (               shift and go to state 42
    NUMBER          shift and go to state 45

    factor                         shift and go to state 83

state 64

    (45) term -> term / . factor
    (46) term -> term / . / factor
    (48) factor -> . VARIABLE
    (49) factor -> . ( expression )
    (50) factor -> . NUMBER

    /               shift and go to state 84
    VARIABLE        shift and go to state 43
    (               shift and go to state 42
    NUMBER          shift and go to state 45

    factor                         shift and go to state 85

state 65

    (43) expression -> LEN ( . term )
    (44) term -> . term * factor
    (45) term -> . term / factor
    (46) term -> . term / / factor
    (47) term -> . factor
    (48) factor -> . VARIABLE
    (49) factor -> . ( expression )
    (50) factor -> . NUMBER

    VARIABLE        shift and go to state 43
    (               shift and go to state 42
    NUMBER          shift and go to state 45

    term                           shift and go to state 86
    factor                         shift and go to state 40

state 66

    (49) factor -> ( expression . )
    (39) expression -> expression . + term
    (40) expression -> expression . - term

    )               shift and go to state 87
    +               shift and go to state 61
    -               shift and go to state 62


state 67

    (34) modification -> VARIABLE [ factor ] . = VARIABLE [ factor ]
    (35) modification -> VARIABLE [ factor ] . = VARIABLE

    =               shift and go to state 88


state 68

    (57) runfunction -> VARIABLE ( sentence ) .

    VARIABLE        reduce using rule 57 (runfunction -> VARIABLE ( sentence ) .)
    PRINT           reduce using rule 57 (runfunction -> VARIABLE ( sentence ) .)
    IF              reduce using rule 57 (runfunction -> VARIABLE ( sentence ) .)
    WHILE           reduce using rule 57 (runfunction -> VARIABLE ( sentence ) .)
    FOR             reduce using rule 57 (runfunction -> VARIABLE ( sentence ) .)
    BREAK           reduce using rule 57 (runfunction -> VARIABLE ( sentence ) .)
    RETURN          reduce using rule 57 (runfunction -> VARIABLE ( sentence ) .)
    DEF             reduce using rule 57 (runfunction -> VARIABLE ( sentence ) .)
    $end            reduce using rule 57 (runfunction -> VARIABLE ( sentence ) .)
    }               reduce using rule 57 (runfunction -> VARIABLE ( sentence ) .)


state 69

    (52) sentence -> word , . sentence
    (52) sentence -> . word , sentence
    (53) sentence -> . word
    (54) word -> . NUMBER
    (55) word -> . VARIABLE

    NUMBER          shift and go to state 51
    VARIABLE        shift and go to state 48

    word                           shift and go to state 50
    sentence                       shift and go to state 89

state 70

    (51) print -> PRINT ( sentence ) .

    VARIABLE        reduce using rule 51 (print -> PRINT ( sentence ) .)
    PRINT           reduce using rule 51 (print -> PRINT ( sentence ) .)
    IF              reduce using rule 51 (print -> PRINT ( sentence ) .)
    WHILE           reduce using rule 51 (print -> PRINT ( sentence ) .)
    FOR             reduce using rule 51 (print -> PRINT ( sentence ) .)
    BREAK           reduce using rule 51 (print -> PRINT ( sentence ) .)
    RETURN          reduce using rule 51 (print -> PRINT ( sentence ) .)
    DEF             reduce using rule 51 (print -> PRINT ( sentence ) .)
    $end            reduce using rule 51 (print -> PRINT ( sentence ) .)
    }               reduce using rule 51 (print -> PRINT ( sentence ) .)


state 71

    (29) iF -> IF ( condition ) . { statements }
    (30) iF -> IF ( condition ) . { statements } ELIF ( condition ) { statements } ELSE { statements }

    {               shift and go to state 90


state 72

    (19) condition -> VARIABLE > . VARIABLE
    (21) condition -> VARIABLE > . NUMBER
    (24) condition -> VARIABLE > . = VARIABLE

    VARIABLE        shift and go to state 91
    NUMBER          shift and go to state 92
    =               shift and go to state 93


state 73

    (20) condition -> VARIABLE < . VARIABLE
    (22) condition -> VARIABLE < . NUMBER
    (23) condition -> VARIABLE < . = VARIABLE
    (27) condition -> VARIABLE < . VARIABLE AND VARIABLE [ factor ] > VARIABLE
    (28) condition -> VARIABLE < . VARIABLE AND VARIABLE [ factor ] < = VARIABLE

    VARIABLE        shift and go to state 94
    NUMBER          shift and go to state 95
    =               shift and go to state 96


state 74

    (25) condition -> VARIABLE [ . factor ] > VARIABLE
    (26) condition -> VARIABLE [ . factor ] < VARIABLE
    (48) factor -> . VARIABLE
    (49) factor -> . ( expression )
    (50) factor -> . NUMBER

    VARIABLE        shift and go to state 43
    (               shift and go to state 42
    NUMBER          shift and go to state 45

    factor                         shift and go to state 97

state 75

    (31) whilE -> WHILE ( condition ) . { statements }

    {               shift and go to state 98


state 76

    (18) for -> FOR ( operation ; . condition ; operation ) { statements }
    (19) condition -> . VARIABLE > VARIABLE
    (20) condition -> . VARIABLE < VARIABLE
    (21) condition -> . VARIABLE > NUMBER
    (22) condition -> . VARIABLE < NUMBER
    (23) condition -> . VARIABLE < = VARIABLE
    (24) condition -> . VARIABLE > = VARIABLE
    (25) condition -> . VARIABLE [ factor ] > VARIABLE
    (26) condition -> . VARIABLE [ factor ] < VARIABLE
    (27) condition -> . VARIABLE < VARIABLE AND VARIABLE [ factor ] > VARIABLE
    (28) condition -> . VARIABLE < VARIABLE AND VARIABLE [ factor ] < = VARIABLE

    VARIABLE        shift and go to state 54

    condition                      shift and go to state 99

state 77

    (36) operation -> VARIABLE = . expression
    (39) expression -> . expression + term
    (40) expression -> . expression - term
    (41) expression -> . term
    (42) expression -> . VARIABLE [ factor ]
    (43) expression -> . LEN ( term )
    (44) term -> . term * factor
    (45) term -> . term / factor
    (46) term -> . term / / factor
    (47) term -> . factor
    (48) factor -> . VARIABLE
    (49) factor -> . ( expression )
    (50) factor -> . NUMBER

    VARIABLE        shift and go to state 35
    LEN             shift and go to state 41
    (               shift and go to state 42
    NUMBER          shift and go to state 45

    expression                     shift and go to state 38
    term                           shift and go to state 39
    factor                         shift and go to state 40

state 78

    (56) function -> DEF VARIABLE ( sentence . ) { statements }

    )               shift and go to state 100


state 79

    (42) expression -> VARIABLE [ factor . ]

    ]               shift and go to state 101


state 80

    (33) assignment -> VARIABLE = [ sentence ] .

    VARIABLE        reduce using rule 33 (assignment -> VARIABLE = [ sentence ] .)
    PRINT           reduce using rule 33 (assignment -> VARIABLE = [ sentence ] .)
    IF              reduce using rule 33 (assignment -> VARIABLE = [ sentence ] .)
    WHILE           reduce using rule 33 (assignment -> VARIABLE = [ sentence ] .)
    FOR             reduce using rule 33 (assignment -> VARIABLE = [ sentence ] .)
    BREAK           reduce using rule 33 (assignment -> VARIABLE = [ sentence ] .)
    RETURN          reduce using rule 33 (assignment -> VARIABLE = [ sentence ] .)
    DEF             reduce using rule 33 (assignment -> VARIABLE = [ sentence ] .)
    $end            reduce using rule 33 (assignment -> VARIABLE = [ sentence ] .)
    }               reduce using rule 33 (assignment -> VARIABLE = [ sentence ] .)


state 81

    (39) expression -> expression + term .
    (44) term -> term . * factor
    (45) term -> term . / factor
    (46) term -> term . / / factor

    +               reduce using rule 39 (expression -> expression + term .)
    -               reduce using rule 39 (expression -> expression + term .)
    VARIABLE        reduce using rule 39 (expression -> expression + term .)
    PRINT           reduce using rule 39 (expression -> expression + term .)
    IF              reduce using rule 39 (expression -> expression + term .)
    WHILE           reduce using rule 39 (expression -> expression + term .)
    FOR             reduce using rule 39 (expression -> expression + term .)
    BREAK           reduce using rule 39 (expression -> expression + term .)
    RETURN          reduce using rule 39 (expression -> expression + term .)
    DEF             reduce using rule 39 (expression -> expression + term .)
    $end            reduce using rule 39 (expression -> expression + term .)
    }               reduce using rule 39 (expression -> expression + term .)
    )               reduce using rule 39 (expression -> expression + term .)
    ;               reduce using rule 39 (expression -> expression + term .)
    *               shift and go to state 63
    /               shift and go to state 64


state 82

    (40) expression -> expression - term .
    (44) term -> term . * factor
    (45) term -> term . / factor
    (46) term -> term . / / factor

    +               reduce using rule 40 (expression -> expression - term .)
    -               reduce using rule 40 (expression -> expression - term .)
    VARIABLE        reduce using rule 40 (expression -> expression - term .)
    PRINT           reduce using rule 40 (expression -> expression - term .)
    IF              reduce using rule 40 (expression -> expression - term .)
    WHILE           reduce using rule 40 (expression -> expression - term .)
    FOR             reduce using rule 40 (expression -> expression - term .)
    BREAK           reduce using rule 40 (expression -> expression - term .)
    RETURN          reduce using rule 40 (expression -> expression - term .)
    DEF             reduce using rule 40 (expression -> expression - term .)
    $end            reduce using rule 40 (expression -> expression - term .)
    }               reduce using rule 40 (expression -> expression - term .)
    )               reduce using rule 40 (expression -> expression - term .)
    ;               reduce using rule 40 (expression -> expression - term .)
    *               shift and go to state 63
    /               shift and go to state 64


state 83

    (44) term -> term * factor .

    *               reduce using rule 44 (term -> term * factor .)
    /               reduce using rule 44 (term -> term * factor .)
    +               reduce using rule 44 (term -> term * factor .)
    -               reduce using rule 44 (term -> term * factor .)
    VARIABLE        reduce using rule 44 (term -> term * factor .)
    PRINT           reduce using rule 44 (term -> term * factor .)
    IF              reduce using rule 44 (term -> term * factor .)
    WHILE           reduce using rule 44 (term -> term * factor .)
    FOR             reduce using rule 44 (term -> term * factor .)
    BREAK           reduce using rule 44 (term -> term * factor .)
    RETURN          reduce using rule 44 (term -> term * factor .)
    DEF             reduce using rule 44 (term -> term * factor .)
    $end            reduce using rule 44 (term -> term * factor .)
    }               reduce using rule 44 (term -> term * factor .)
    )               reduce using rule 44 (term -> term * factor .)
    ;               reduce using rule 44 (term -> term * factor .)


state 84

    (46) term -> term / / . factor
    (48) factor -> . VARIABLE
    (49) factor -> . ( expression )
    (50) factor -> . NUMBER

    VARIABLE        shift and go to state 43
    (               shift and go to state 42
    NUMBER          shift and go to state 45

    factor                         shift and go to state 102

state 85

    (45) term -> term / factor .

    *               reduce using rule 45 (term -> term / factor .)
    /               reduce using rule 45 (term -> term / factor .)
    +               reduce using rule 45 (term -> term / factor .)
    -               reduce using rule 45 (term -> term / factor .)
    VARIABLE        reduce using rule 45 (term -> term / factor .)
    PRINT           reduce using rule 45 (term -> term / factor .)
    IF              reduce using rule 45 (term -> term / factor .)
    WHILE           reduce using rule 45 (term -> term / factor .)
    FOR             reduce using rule 45 (term -> term / factor .)
    BREAK           reduce using rule 45 (term -> term / factor .)
    RETURN          reduce using rule 45 (term -> term / factor .)
    DEF             reduce using rule 45 (term -> term / factor .)
    $end            reduce using rule 45 (term -> term / factor .)
    }               reduce using rule 45 (term -> term / factor .)
    )               reduce using rule 45 (term -> term / factor .)
    ;               reduce using rule 45 (term -> term / factor .)


state 86

    (43) expression -> LEN ( term . )
    (44) term -> term . * factor
    (45) term -> term . / factor
    (46) term -> term . / / factor

    )               shift and go to state 103
    *               shift and go to state 63
    /               shift and go to state 64


state 87

    (49) factor -> ( expression ) .

    *               reduce using rule 49 (factor -> ( expression ) .)
    /               reduce using rule 49 (factor -> ( expression ) .)
    +               reduce using rule 49 (factor -> ( expression ) .)
    -               reduce using rule 49 (factor -> ( expression ) .)
    VARIABLE        reduce using rule 49 (factor -> ( expression ) .)
    PRINT           reduce using rule 49 (factor -> ( expression ) .)
    IF              reduce using rule 49 (factor -> ( expression ) .)
    WHILE           reduce using rule 49 (factor -> ( expression ) .)
    FOR             reduce using rule 49 (factor -> ( expression ) .)
    BREAK           reduce using rule 49 (factor -> ( expression ) .)
    RETURN          reduce using rule 49 (factor -> ( expression ) .)
    DEF             reduce using rule 49 (factor -> ( expression ) .)
    $end            reduce using rule 49 (factor -> ( expression ) .)
    }               reduce using rule 49 (factor -> ( expression ) .)
    ]               reduce using rule 49 (factor -> ( expression ) .)
    )               reduce using rule 49 (factor -> ( expression ) .)
    ;               reduce using rule 49 (factor -> ( expression ) .)


state 88

    (34) modification -> VARIABLE [ factor ] = . VARIABLE [ factor ]
    (35) modification -> VARIABLE [ factor ] = . VARIABLE

    VARIABLE        shift and go to state 104


state 89

    (52) sentence -> word , sentence .

    )               reduce using rule 52 (sentence -> word , sentence .)
    ]               reduce using rule 52 (sentence -> word , sentence .)


state 90

    (29) iF -> IF ( condition ) { . statements }
    (30) iF -> IF ( condition ) { . statements } ELIF ( condition ) { statements } ELSE { statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . modification
    (8) statement -> . iF
    (9) statement -> . whilE
    (10) statement -> . for
    (11) statement -> . break
    (12) statement -> . return
    (13) statement -> . function
    (14) statement -> . runfunction
    (32) assignment -> . VARIABLE = NUMBER
    (33) assignment -> . VARIABLE = [ sentence ]
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -
    (51) print -> . PRINT ( sentence )
    (34) modification -> . VARIABLE [ factor ] = VARIABLE [ factor ]
    (35) modification -> . VARIABLE [ factor ] = VARIABLE
    (29) iF -> . IF ( condition ) { statements }
    (30) iF -> . IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
    (31) whilE -> . WHILE ( condition ) { statements }
    (18) for -> . FOR ( operation ; condition ; operation ) { statements }
    (15) break -> . BREAK statements
    (16) break -> . BREAK
    (17) return -> . RETURN
    (56) function -> . DEF VARIABLE ( sentence ) { statements }
    (57) runfunction -> . VARIABLE ( sentence )

    VARIABLE        shift and go to state 15
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    DEF             shift and go to state 22

    statements                     shift and go to state 105
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    modification                   shift and go to state 7
    iF                             shift and go to state 8
    whilE                          shift and go to state 9
    for                            shift and go to state 10
    break                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    runfunction                    shift and go to state 14

state 91

    (19) condition -> VARIABLE > VARIABLE .

    )               reduce using rule 19 (condition -> VARIABLE > VARIABLE .)
    ;               reduce using rule 19 (condition -> VARIABLE > VARIABLE .)


state 92

    (21) condition -> VARIABLE > NUMBER .

    )               reduce using rule 21 (condition -> VARIABLE > NUMBER .)
    ;               reduce using rule 21 (condition -> VARIABLE > NUMBER .)


state 93

    (24) condition -> VARIABLE > = . VARIABLE

    VARIABLE        shift and go to state 106


state 94

    (20) condition -> VARIABLE < VARIABLE .
    (27) condition -> VARIABLE < VARIABLE . AND VARIABLE [ factor ] > VARIABLE
    (28) condition -> VARIABLE < VARIABLE . AND VARIABLE [ factor ] < = VARIABLE

    )               reduce using rule 20 (condition -> VARIABLE < VARIABLE .)
    ;               reduce using rule 20 (condition -> VARIABLE < VARIABLE .)
    AND             shift and go to state 107


state 95

    (22) condition -> VARIABLE < NUMBER .

    )               reduce using rule 22 (condition -> VARIABLE < NUMBER .)
    ;               reduce using rule 22 (condition -> VARIABLE < NUMBER .)


state 96

    (23) condition -> VARIABLE < = . VARIABLE

    VARIABLE        shift and go to state 108


state 97

    (25) condition -> VARIABLE [ factor . ] > VARIABLE
    (26) condition -> VARIABLE [ factor . ] < VARIABLE

    ]               shift and go to state 109


state 98

    (31) whilE -> WHILE ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . modification
    (8) statement -> . iF
    (9) statement -> . whilE
    (10) statement -> . for
    (11) statement -> . break
    (12) statement -> . return
    (13) statement -> . function
    (14) statement -> . runfunction
    (32) assignment -> . VARIABLE = NUMBER
    (33) assignment -> . VARIABLE = [ sentence ]
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -
    (51) print -> . PRINT ( sentence )
    (34) modification -> . VARIABLE [ factor ] = VARIABLE [ factor ]
    (35) modification -> . VARIABLE [ factor ] = VARIABLE
    (29) iF -> . IF ( condition ) { statements }
    (30) iF -> . IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
    (31) whilE -> . WHILE ( condition ) { statements }
    (18) for -> . FOR ( operation ; condition ; operation ) { statements }
    (15) break -> . BREAK statements
    (16) break -> . BREAK
    (17) return -> . RETURN
    (56) function -> . DEF VARIABLE ( sentence ) { statements }
    (57) runfunction -> . VARIABLE ( sentence )

    VARIABLE        shift and go to state 15
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    DEF             shift and go to state 22

    statements                     shift and go to state 110
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    modification                   shift and go to state 7
    iF                             shift and go to state 8
    whilE                          shift and go to state 9
    for                            shift and go to state 10
    break                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    runfunction                    shift and go to state 14

state 99

    (18) for -> FOR ( operation ; condition . ; operation ) { statements }

    ;               shift and go to state 111


state 100

    (56) function -> DEF VARIABLE ( sentence ) . { statements }

    {               shift and go to state 112


state 101

    (42) expression -> VARIABLE [ factor ] .

    +               reduce using rule 42 (expression -> VARIABLE [ factor ] .)
    -               reduce using rule 42 (expression -> VARIABLE [ factor ] .)
    VARIABLE        reduce using rule 42 (expression -> VARIABLE [ factor ] .)
    PRINT           reduce using rule 42 (expression -> VARIABLE [ factor ] .)
    IF              reduce using rule 42 (expression -> VARIABLE [ factor ] .)
    WHILE           reduce using rule 42 (expression -> VARIABLE [ factor ] .)
    FOR             reduce using rule 42 (expression -> VARIABLE [ factor ] .)
    BREAK           reduce using rule 42 (expression -> VARIABLE [ factor ] .)
    RETURN          reduce using rule 42 (expression -> VARIABLE [ factor ] .)
    DEF             reduce using rule 42 (expression -> VARIABLE [ factor ] .)
    $end            reduce using rule 42 (expression -> VARIABLE [ factor ] .)
    }               reduce using rule 42 (expression -> VARIABLE [ factor ] .)
    )               reduce using rule 42 (expression -> VARIABLE [ factor ] .)
    ;               reduce using rule 42 (expression -> VARIABLE [ factor ] .)


state 102

    (46) term -> term / / factor .

    *               reduce using rule 46 (term -> term / / factor .)
    /               reduce using rule 46 (term -> term / / factor .)
    +               reduce using rule 46 (term -> term / / factor .)
    -               reduce using rule 46 (term -> term / / factor .)
    VARIABLE        reduce using rule 46 (term -> term / / factor .)
    PRINT           reduce using rule 46 (term -> term / / factor .)
    IF              reduce using rule 46 (term -> term / / factor .)
    WHILE           reduce using rule 46 (term -> term / / factor .)
    FOR             reduce using rule 46 (term -> term / / factor .)
    BREAK           reduce using rule 46 (term -> term / / factor .)
    RETURN          reduce using rule 46 (term -> term / / factor .)
    DEF             reduce using rule 46 (term -> term / / factor .)
    $end            reduce using rule 46 (term -> term / / factor .)
    }               reduce using rule 46 (term -> term / / factor .)
    )               reduce using rule 46 (term -> term / / factor .)
    ;               reduce using rule 46 (term -> term / / factor .)


state 103

    (43) expression -> LEN ( term ) .

    +               reduce using rule 43 (expression -> LEN ( term ) .)
    -               reduce using rule 43 (expression -> LEN ( term ) .)
    VARIABLE        reduce using rule 43 (expression -> LEN ( term ) .)
    PRINT           reduce using rule 43 (expression -> LEN ( term ) .)
    IF              reduce using rule 43 (expression -> LEN ( term ) .)
    WHILE           reduce using rule 43 (expression -> LEN ( term ) .)
    FOR             reduce using rule 43 (expression -> LEN ( term ) .)
    BREAK           reduce using rule 43 (expression -> LEN ( term ) .)
    RETURN          reduce using rule 43 (expression -> LEN ( term ) .)
    DEF             reduce using rule 43 (expression -> LEN ( term ) .)
    $end            reduce using rule 43 (expression -> LEN ( term ) .)
    }               reduce using rule 43 (expression -> LEN ( term ) .)
    )               reduce using rule 43 (expression -> LEN ( term ) .)
    ;               reduce using rule 43 (expression -> LEN ( term ) .)


state 104

    (34) modification -> VARIABLE [ factor ] = VARIABLE . [ factor ]
    (35) modification -> VARIABLE [ factor ] = VARIABLE .

    [               shift and go to state 113
    VARIABLE        reduce using rule 35 (modification -> VARIABLE [ factor ] = VARIABLE .)
    PRINT           reduce using rule 35 (modification -> VARIABLE [ factor ] = VARIABLE .)
    IF              reduce using rule 35 (modification -> VARIABLE [ factor ] = VARIABLE .)
    WHILE           reduce using rule 35 (modification -> VARIABLE [ factor ] = VARIABLE .)
    FOR             reduce using rule 35 (modification -> VARIABLE [ factor ] = VARIABLE .)
    BREAK           reduce using rule 35 (modification -> VARIABLE [ factor ] = VARIABLE .)
    RETURN          reduce using rule 35 (modification -> VARIABLE [ factor ] = VARIABLE .)
    DEF             reduce using rule 35 (modification -> VARIABLE [ factor ] = VARIABLE .)
    $end            reduce using rule 35 (modification -> VARIABLE [ factor ] = VARIABLE .)
    }               reduce using rule 35 (modification -> VARIABLE [ factor ] = VARIABLE .)


state 105

    (29) iF -> IF ( condition ) { statements . }
    (30) iF -> IF ( condition ) { statements . } ELIF ( condition ) { statements } ELSE { statements }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . modification
    (8) statement -> . iF
    (9) statement -> . whilE
    (10) statement -> . for
    (11) statement -> . break
    (12) statement -> . return
    (13) statement -> . function
    (14) statement -> . runfunction
    (32) assignment -> . VARIABLE = NUMBER
    (33) assignment -> . VARIABLE = [ sentence ]
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -
    (51) print -> . PRINT ( sentence )
    (34) modification -> . VARIABLE [ factor ] = VARIABLE [ factor ]
    (35) modification -> . VARIABLE [ factor ] = VARIABLE
    (29) iF -> . IF ( condition ) { statements }
    (30) iF -> . IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
    (31) whilE -> . WHILE ( condition ) { statements }
    (18) for -> . FOR ( operation ; condition ; operation ) { statements }
    (15) break -> . BREAK statements
    (16) break -> . BREAK
    (17) return -> . RETURN
    (56) function -> . DEF VARIABLE ( sentence ) { statements }
    (57) runfunction -> . VARIABLE ( sentence )

    }               shift and go to state 114
    VARIABLE        shift and go to state 15
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    DEF             shift and go to state 22

    statement                      shift and go to state 23
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    modification                   shift and go to state 7
    iF                             shift and go to state 8
    whilE                          shift and go to state 9
    for                            shift and go to state 10
    break                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    runfunction                    shift and go to state 14

state 106

    (24) condition -> VARIABLE > = VARIABLE .

    )               reduce using rule 24 (condition -> VARIABLE > = VARIABLE .)
    ;               reduce using rule 24 (condition -> VARIABLE > = VARIABLE .)


state 107

    (27) condition -> VARIABLE < VARIABLE AND . VARIABLE [ factor ] > VARIABLE
    (28) condition -> VARIABLE < VARIABLE AND . VARIABLE [ factor ] < = VARIABLE

    VARIABLE        shift and go to state 115


state 108

    (23) condition -> VARIABLE < = VARIABLE .

    )               reduce using rule 23 (condition -> VARIABLE < = VARIABLE .)
    ;               reduce using rule 23 (condition -> VARIABLE < = VARIABLE .)


state 109

    (25) condition -> VARIABLE [ factor ] . > VARIABLE
    (26) condition -> VARIABLE [ factor ] . < VARIABLE

    >               shift and go to state 116
    <               shift and go to state 117


state 110

    (31) whilE -> WHILE ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . modification
    (8) statement -> . iF
    (9) statement -> . whilE
    (10) statement -> . for
    (11) statement -> . break
    (12) statement -> . return
    (13) statement -> . function
    (14) statement -> . runfunction
    (32) assignment -> . VARIABLE = NUMBER
    (33) assignment -> . VARIABLE = [ sentence ]
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -
    (51) print -> . PRINT ( sentence )
    (34) modification -> . VARIABLE [ factor ] = VARIABLE [ factor ]
    (35) modification -> . VARIABLE [ factor ] = VARIABLE
    (29) iF -> . IF ( condition ) { statements }
    (30) iF -> . IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
    (31) whilE -> . WHILE ( condition ) { statements }
    (18) for -> . FOR ( operation ; condition ; operation ) { statements }
    (15) break -> . BREAK statements
    (16) break -> . BREAK
    (17) return -> . RETURN
    (56) function -> . DEF VARIABLE ( sentence ) { statements }
    (57) runfunction -> . VARIABLE ( sentence )

    }               shift and go to state 118
    VARIABLE        shift and go to state 15
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    DEF             shift and go to state 22

    statement                      shift and go to state 23
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    modification                   shift and go to state 7
    iF                             shift and go to state 8
    whilE                          shift and go to state 9
    for                            shift and go to state 10
    break                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    runfunction                    shift and go to state 14

state 111

    (18) for -> FOR ( operation ; condition ; . operation ) { statements }
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -

    VARIABLE        shift and go to state 57

    operation                      shift and go to state 119

state 112

    (56) function -> DEF VARIABLE ( sentence ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . modification
    (8) statement -> . iF
    (9) statement -> . whilE
    (10) statement -> . for
    (11) statement -> . break
    (12) statement -> . return
    (13) statement -> . function
    (14) statement -> . runfunction
    (32) assignment -> . VARIABLE = NUMBER
    (33) assignment -> . VARIABLE = [ sentence ]
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -
    (51) print -> . PRINT ( sentence )
    (34) modification -> . VARIABLE [ factor ] = VARIABLE [ factor ]
    (35) modification -> . VARIABLE [ factor ] = VARIABLE
    (29) iF -> . IF ( condition ) { statements }
    (30) iF -> . IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
    (31) whilE -> . WHILE ( condition ) { statements }
    (18) for -> . FOR ( operation ; condition ; operation ) { statements }
    (15) break -> . BREAK statements
    (16) break -> . BREAK
    (17) return -> . RETURN
    (56) function -> . DEF VARIABLE ( sentence ) { statements }
    (57) runfunction -> . VARIABLE ( sentence )

    VARIABLE        shift and go to state 15
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    DEF             shift and go to state 22

    statements                     shift and go to state 120
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    modification                   shift and go to state 7
    iF                             shift and go to state 8
    whilE                          shift and go to state 9
    for                            shift and go to state 10
    break                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    runfunction                    shift and go to state 14

state 113

    (34) modification -> VARIABLE [ factor ] = VARIABLE [ . factor ]
    (48) factor -> . VARIABLE
    (49) factor -> . ( expression )
    (50) factor -> . NUMBER

    VARIABLE        shift and go to state 43
    (               shift and go to state 42
    NUMBER          shift and go to state 45

    factor                         shift and go to state 121

state 114

    (29) iF -> IF ( condition ) { statements } .
    (30) iF -> IF ( condition ) { statements } . ELIF ( condition ) { statements } ELSE { statements }

    VARIABLE        reduce using rule 29 (iF -> IF ( condition ) { statements } .)
    PRINT           reduce using rule 29 (iF -> IF ( condition ) { statements } .)
    IF              reduce using rule 29 (iF -> IF ( condition ) { statements } .)
    WHILE           reduce using rule 29 (iF -> IF ( condition ) { statements } .)
    FOR             reduce using rule 29 (iF -> IF ( condition ) { statements } .)
    BREAK           reduce using rule 29 (iF -> IF ( condition ) { statements } .)
    RETURN          reduce using rule 29 (iF -> IF ( condition ) { statements } .)
    DEF             reduce using rule 29 (iF -> IF ( condition ) { statements } .)
    $end            reduce using rule 29 (iF -> IF ( condition ) { statements } .)
    }               reduce using rule 29 (iF -> IF ( condition ) { statements } .)
    ELIF            shift and go to state 122


state 115

    (27) condition -> VARIABLE < VARIABLE AND VARIABLE . [ factor ] > VARIABLE
    (28) condition -> VARIABLE < VARIABLE AND VARIABLE . [ factor ] < = VARIABLE

    [               shift and go to state 123


state 116

    (25) condition -> VARIABLE [ factor ] > . VARIABLE

    VARIABLE        shift and go to state 124


state 117

    (26) condition -> VARIABLE [ factor ] < . VARIABLE

    VARIABLE        shift and go to state 125


state 118

    (31) whilE -> WHILE ( condition ) { statements } .

    VARIABLE        reduce using rule 31 (whilE -> WHILE ( condition ) { statements } .)
    PRINT           reduce using rule 31 (whilE -> WHILE ( condition ) { statements } .)
    IF              reduce using rule 31 (whilE -> WHILE ( condition ) { statements } .)
    WHILE           reduce using rule 31 (whilE -> WHILE ( condition ) { statements } .)
    FOR             reduce using rule 31 (whilE -> WHILE ( condition ) { statements } .)
    BREAK           reduce using rule 31 (whilE -> WHILE ( condition ) { statements } .)
    RETURN          reduce using rule 31 (whilE -> WHILE ( condition ) { statements } .)
    DEF             reduce using rule 31 (whilE -> WHILE ( condition ) { statements } .)
    $end            reduce using rule 31 (whilE -> WHILE ( condition ) { statements } .)
    }               reduce using rule 31 (whilE -> WHILE ( condition ) { statements } .)


state 119

    (18) for -> FOR ( operation ; condition ; operation . ) { statements }

    )               shift and go to state 126


state 120

    (56) function -> DEF VARIABLE ( sentence ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . modification
    (8) statement -> . iF
    (9) statement -> . whilE
    (10) statement -> . for
    (11) statement -> . break
    (12) statement -> . return
    (13) statement -> . function
    (14) statement -> . runfunction
    (32) assignment -> . VARIABLE = NUMBER
    (33) assignment -> . VARIABLE = [ sentence ]
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -
    (51) print -> . PRINT ( sentence )
    (34) modification -> . VARIABLE [ factor ] = VARIABLE [ factor ]
    (35) modification -> . VARIABLE [ factor ] = VARIABLE
    (29) iF -> . IF ( condition ) { statements }
    (30) iF -> . IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
    (31) whilE -> . WHILE ( condition ) { statements }
    (18) for -> . FOR ( operation ; condition ; operation ) { statements }
    (15) break -> . BREAK statements
    (16) break -> . BREAK
    (17) return -> . RETURN
    (56) function -> . DEF VARIABLE ( sentence ) { statements }
    (57) runfunction -> . VARIABLE ( sentence )

    }               shift and go to state 127
    VARIABLE        shift and go to state 15
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    DEF             shift and go to state 22

    statement                      shift and go to state 23
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    modification                   shift and go to state 7
    iF                             shift and go to state 8
    whilE                          shift and go to state 9
    for                            shift and go to state 10
    break                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    runfunction                    shift and go to state 14

state 121

    (34) modification -> VARIABLE [ factor ] = VARIABLE [ factor . ]

    ]               shift and go to state 128


state 122

    (30) iF -> IF ( condition ) { statements } ELIF . ( condition ) { statements } ELSE { statements }

    (               shift and go to state 129


state 123

    (27) condition -> VARIABLE < VARIABLE AND VARIABLE [ . factor ] > VARIABLE
    (28) condition -> VARIABLE < VARIABLE AND VARIABLE [ . factor ] < = VARIABLE
    (48) factor -> . VARIABLE
    (49) factor -> . ( expression )
    (50) factor -> . NUMBER

    VARIABLE        shift and go to state 43
    (               shift and go to state 42
    NUMBER          shift and go to state 45

    factor                         shift and go to state 130

state 124

    (25) condition -> VARIABLE [ factor ] > VARIABLE .

    )               reduce using rule 25 (condition -> VARIABLE [ factor ] > VARIABLE .)
    ;               reduce using rule 25 (condition -> VARIABLE [ factor ] > VARIABLE .)


state 125

    (26) condition -> VARIABLE [ factor ] < VARIABLE .

    )               reduce using rule 26 (condition -> VARIABLE [ factor ] < VARIABLE .)
    ;               reduce using rule 26 (condition -> VARIABLE [ factor ] < VARIABLE .)


state 126

    (18) for -> FOR ( operation ; condition ; operation ) . { statements }

    {               shift and go to state 131


state 127

    (56) function -> DEF VARIABLE ( sentence ) { statements } .

    VARIABLE        reduce using rule 56 (function -> DEF VARIABLE ( sentence ) { statements } .)
    PRINT           reduce using rule 56 (function -> DEF VARIABLE ( sentence ) { statements } .)
    IF              reduce using rule 56 (function -> DEF VARIABLE ( sentence ) { statements } .)
    WHILE           reduce using rule 56 (function -> DEF VARIABLE ( sentence ) { statements } .)
    FOR             reduce using rule 56 (function -> DEF VARIABLE ( sentence ) { statements } .)
    BREAK           reduce using rule 56 (function -> DEF VARIABLE ( sentence ) { statements } .)
    RETURN          reduce using rule 56 (function -> DEF VARIABLE ( sentence ) { statements } .)
    DEF             reduce using rule 56 (function -> DEF VARIABLE ( sentence ) { statements } .)
    $end            reduce using rule 56 (function -> DEF VARIABLE ( sentence ) { statements } .)
    }               reduce using rule 56 (function -> DEF VARIABLE ( sentence ) { statements } .)


state 128

    (34) modification -> VARIABLE [ factor ] = VARIABLE [ factor ] .

    VARIABLE        reduce using rule 34 (modification -> VARIABLE [ factor ] = VARIABLE [ factor ] .)
    PRINT           reduce using rule 34 (modification -> VARIABLE [ factor ] = VARIABLE [ factor ] .)
    IF              reduce using rule 34 (modification -> VARIABLE [ factor ] = VARIABLE [ factor ] .)
    WHILE           reduce using rule 34 (modification -> VARIABLE [ factor ] = VARIABLE [ factor ] .)
    FOR             reduce using rule 34 (modification -> VARIABLE [ factor ] = VARIABLE [ factor ] .)
    BREAK           reduce using rule 34 (modification -> VARIABLE [ factor ] = VARIABLE [ factor ] .)
    RETURN          reduce using rule 34 (modification -> VARIABLE [ factor ] = VARIABLE [ factor ] .)
    DEF             reduce using rule 34 (modification -> VARIABLE [ factor ] = VARIABLE [ factor ] .)
    $end            reduce using rule 34 (modification -> VARIABLE [ factor ] = VARIABLE [ factor ] .)
    }               reduce using rule 34 (modification -> VARIABLE [ factor ] = VARIABLE [ factor ] .)


state 129

    (30) iF -> IF ( condition ) { statements } ELIF ( . condition ) { statements } ELSE { statements }
    (19) condition -> . VARIABLE > VARIABLE
    (20) condition -> . VARIABLE < VARIABLE
    (21) condition -> . VARIABLE > NUMBER
    (22) condition -> . VARIABLE < NUMBER
    (23) condition -> . VARIABLE < = VARIABLE
    (24) condition -> . VARIABLE > = VARIABLE
    (25) condition -> . VARIABLE [ factor ] > VARIABLE
    (26) condition -> . VARIABLE [ factor ] < VARIABLE
    (27) condition -> . VARIABLE < VARIABLE AND VARIABLE [ factor ] > VARIABLE
    (28) condition -> . VARIABLE < VARIABLE AND VARIABLE [ factor ] < = VARIABLE

    VARIABLE        shift and go to state 54

    condition                      shift and go to state 132

state 130

    (27) condition -> VARIABLE < VARIABLE AND VARIABLE [ factor . ] > VARIABLE
    (28) condition -> VARIABLE < VARIABLE AND VARIABLE [ factor . ] < = VARIABLE

    ]               shift and go to state 133


state 131

    (18) for -> FOR ( operation ; condition ; operation ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . modification
    (8) statement -> . iF
    (9) statement -> . whilE
    (10) statement -> . for
    (11) statement -> . break
    (12) statement -> . return
    (13) statement -> . function
    (14) statement -> . runfunction
    (32) assignment -> . VARIABLE = NUMBER
    (33) assignment -> . VARIABLE = [ sentence ]
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -
    (51) print -> . PRINT ( sentence )
    (34) modification -> . VARIABLE [ factor ] = VARIABLE [ factor ]
    (35) modification -> . VARIABLE [ factor ] = VARIABLE
    (29) iF -> . IF ( condition ) { statements }
    (30) iF -> . IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
    (31) whilE -> . WHILE ( condition ) { statements }
    (18) for -> . FOR ( operation ; condition ; operation ) { statements }
    (15) break -> . BREAK statements
    (16) break -> . BREAK
    (17) return -> . RETURN
    (56) function -> . DEF VARIABLE ( sentence ) { statements }
    (57) runfunction -> . VARIABLE ( sentence )

    VARIABLE        shift and go to state 15
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    DEF             shift and go to state 22

    operation                      shift and go to state 5
    statements                     shift and go to state 134
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print                          shift and go to state 6
    modification                   shift and go to state 7
    iF                             shift and go to state 8
    whilE                          shift and go to state 9
    for                            shift and go to state 10
    break                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    runfunction                    shift and go to state 14

state 132

    (30) iF -> IF ( condition ) { statements } ELIF ( condition . ) { statements } ELSE { statements }

    )               shift and go to state 135


state 133

    (27) condition -> VARIABLE < VARIABLE AND VARIABLE [ factor ] . > VARIABLE
    (28) condition -> VARIABLE < VARIABLE AND VARIABLE [ factor ] . < = VARIABLE

    >               shift and go to state 137
    <               shift and go to state 136


state 134

    (18) for -> FOR ( operation ; condition ; operation ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . modification
    (8) statement -> . iF
    (9) statement -> . whilE
    (10) statement -> . for
    (11) statement -> . break
    (12) statement -> . return
    (13) statement -> . function
    (14) statement -> . runfunction
    (32) assignment -> . VARIABLE = NUMBER
    (33) assignment -> . VARIABLE = [ sentence ]
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -
    (51) print -> . PRINT ( sentence )
    (34) modification -> . VARIABLE [ factor ] = VARIABLE [ factor ]
    (35) modification -> . VARIABLE [ factor ] = VARIABLE
    (29) iF -> . IF ( condition ) { statements }
    (30) iF -> . IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
    (31) whilE -> . WHILE ( condition ) { statements }
    (18) for -> . FOR ( operation ; condition ; operation ) { statements }
    (15) break -> . BREAK statements
    (16) break -> . BREAK
    (17) return -> . RETURN
    (56) function -> . DEF VARIABLE ( sentence ) { statements }
    (57) runfunction -> . VARIABLE ( sentence )

    }               shift and go to state 138
    VARIABLE        shift and go to state 15
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    DEF             shift and go to state 22

    operation                      shift and go to state 5
    statement                      shift and go to state 23
    assignment                     shift and go to state 4
    print                          shift and go to state 6
    modification                   shift and go to state 7
    iF                             shift and go to state 8
    whilE                          shift and go to state 9
    for                            shift and go to state 10
    break                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    runfunction                    shift and go to state 14

state 135

    (30) iF -> IF ( condition ) { statements } ELIF ( condition ) . { statements } ELSE { statements }

    {               shift and go to state 139


state 136

    (28) condition -> VARIABLE < VARIABLE AND VARIABLE [ factor ] < . = VARIABLE

    =               shift and go to state 140


state 137

    (27) condition -> VARIABLE < VARIABLE AND VARIABLE [ factor ] > . VARIABLE

    VARIABLE        shift and go to state 141


state 138

    (18) for -> FOR ( operation ; condition ; operation ) { statements } .

    VARIABLE        reduce using rule 18 (for -> FOR ( operation ; condition ; operation ) { statements } .)
    PRINT           reduce using rule 18 (for -> FOR ( operation ; condition ; operation ) { statements } .)
    IF              reduce using rule 18 (for -> FOR ( operation ; condition ; operation ) { statements } .)
    WHILE           reduce using rule 18 (for -> FOR ( operation ; condition ; operation ) { statements } .)
    FOR             reduce using rule 18 (for -> FOR ( operation ; condition ; operation ) { statements } .)
    BREAK           reduce using rule 18 (for -> FOR ( operation ; condition ; operation ) { statements } .)
    RETURN          reduce using rule 18 (for -> FOR ( operation ; condition ; operation ) { statements } .)
    DEF             reduce using rule 18 (for -> FOR ( operation ; condition ; operation ) { statements } .)
    $end            reduce using rule 18 (for -> FOR ( operation ; condition ; operation ) { statements } .)
    }               reduce using rule 18 (for -> FOR ( operation ; condition ; operation ) { statements } .)


state 139

    (30) iF -> IF ( condition ) { statements } ELIF ( condition ) { . statements } ELSE { statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . modification
    (8) statement -> . iF
    (9) statement -> . whilE
    (10) statement -> . for
    (11) statement -> . break
    (12) statement -> . return
    (13) statement -> . function
    (14) statement -> . runfunction
    (32) assignment -> . VARIABLE = NUMBER
    (33) assignment -> . VARIABLE = [ sentence ]
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -
    (51) print -> . PRINT ( sentence )
    (34) modification -> . VARIABLE [ factor ] = VARIABLE [ factor ]
    (35) modification -> . VARIABLE [ factor ] = VARIABLE
    (29) iF -> . IF ( condition ) { statements }
    (30) iF -> . IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
    (31) whilE -> . WHILE ( condition ) { statements }
    (18) for -> . FOR ( operation ; condition ; operation ) { statements }
    (15) break -> . BREAK statements
    (16) break -> . BREAK
    (17) return -> . RETURN
    (56) function -> . DEF VARIABLE ( sentence ) { statements }
    (57) runfunction -> . VARIABLE ( sentence )

    VARIABLE        shift and go to state 15
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    DEF             shift and go to state 22

    statements                     shift and go to state 142
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    modification                   shift and go to state 7
    iF                             shift and go to state 8
    whilE                          shift and go to state 9
    for                            shift and go to state 10
    break                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    runfunction                    shift and go to state 14

state 140

    (28) condition -> VARIABLE < VARIABLE AND VARIABLE [ factor ] < = . VARIABLE

    VARIABLE        shift and go to state 143


state 141

    (27) condition -> VARIABLE < VARIABLE AND VARIABLE [ factor ] > VARIABLE .

    )               reduce using rule 27 (condition -> VARIABLE < VARIABLE AND VARIABLE [ factor ] > VARIABLE .)
    ;               reduce using rule 27 (condition -> VARIABLE < VARIABLE AND VARIABLE [ factor ] > VARIABLE .)


state 142

    (30) iF -> IF ( condition ) { statements } ELIF ( condition ) { statements . } ELSE { statements }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . modification
    (8) statement -> . iF
    (9) statement -> . whilE
    (10) statement -> . for
    (11) statement -> . break
    (12) statement -> . return
    (13) statement -> . function
    (14) statement -> . runfunction
    (32) assignment -> . VARIABLE = NUMBER
    (33) assignment -> . VARIABLE = [ sentence ]
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -
    (51) print -> . PRINT ( sentence )
    (34) modification -> . VARIABLE [ factor ] = VARIABLE [ factor ]
    (35) modification -> . VARIABLE [ factor ] = VARIABLE
    (29) iF -> . IF ( condition ) { statements }
    (30) iF -> . IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
    (31) whilE -> . WHILE ( condition ) { statements }
    (18) for -> . FOR ( operation ; condition ; operation ) { statements }
    (15) break -> . BREAK statements
    (16) break -> . BREAK
    (17) return -> . RETURN
    (56) function -> . DEF VARIABLE ( sentence ) { statements }
    (57) runfunction -> . VARIABLE ( sentence )

    }               shift and go to state 144
    VARIABLE        shift and go to state 15
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    DEF             shift and go to state 22

    statement                      shift and go to state 23
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    modification                   shift and go to state 7
    iF                             shift and go to state 8
    whilE                          shift and go to state 9
    for                            shift and go to state 10
    break                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    runfunction                    shift and go to state 14

state 143

    (28) condition -> VARIABLE < VARIABLE AND VARIABLE [ factor ] < = VARIABLE .

    )               reduce using rule 28 (condition -> VARIABLE < VARIABLE AND VARIABLE [ factor ] < = VARIABLE .)
    ;               reduce using rule 28 (condition -> VARIABLE < VARIABLE AND VARIABLE [ factor ] < = VARIABLE .)


state 144

    (30) iF -> IF ( condition ) { statements } ELIF ( condition ) { statements } . ELSE { statements }

    ELSE            shift and go to state 145


state 145

    (30) iF -> IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE . { statements }

    {               shift and go to state 146


state 146

    (30) iF -> IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . modification
    (8) statement -> . iF
    (9) statement -> . whilE
    (10) statement -> . for
    (11) statement -> . break
    (12) statement -> . return
    (13) statement -> . function
    (14) statement -> . runfunction
    (32) assignment -> . VARIABLE = NUMBER
    (33) assignment -> . VARIABLE = [ sentence ]
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -
    (51) print -> . PRINT ( sentence )
    (34) modification -> . VARIABLE [ factor ] = VARIABLE [ factor ]
    (35) modification -> . VARIABLE [ factor ] = VARIABLE
    (29) iF -> . IF ( condition ) { statements }
    (30) iF -> . IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
    (31) whilE -> . WHILE ( condition ) { statements }
    (18) for -> . FOR ( operation ; condition ; operation ) { statements }
    (15) break -> . BREAK statements
    (16) break -> . BREAK
    (17) return -> . RETURN
    (56) function -> . DEF VARIABLE ( sentence ) { statements }
    (57) runfunction -> . VARIABLE ( sentence )

    VARIABLE        shift and go to state 15
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    DEF             shift and go to state 22

    statements                     shift and go to state 147
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    modification                   shift and go to state 7
    iF                             shift and go to state 8
    whilE                          shift and go to state 9
    for                            shift and go to state 10
    break                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    runfunction                    shift and go to state 14

state 147

    (30) iF -> IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . modification
    (8) statement -> . iF
    (9) statement -> . whilE
    (10) statement -> . for
    (11) statement -> . break
    (12) statement -> . return
    (13) statement -> . function
    (14) statement -> . runfunction
    (32) assignment -> . VARIABLE = NUMBER
    (33) assignment -> . VARIABLE = [ sentence ]
    (36) operation -> . VARIABLE = expression
    (37) operation -> . VARIABLE + +
    (38) operation -> . VARIABLE - -
    (51) print -> . PRINT ( sentence )
    (34) modification -> . VARIABLE [ factor ] = VARIABLE [ factor ]
    (35) modification -> . VARIABLE [ factor ] = VARIABLE
    (29) iF -> . IF ( condition ) { statements }
    (30) iF -> . IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements }
    (31) whilE -> . WHILE ( condition ) { statements }
    (18) for -> . FOR ( operation ; condition ; operation ) { statements }
    (15) break -> . BREAK statements
    (16) break -> . BREAK
    (17) return -> . RETURN
    (56) function -> . DEF VARIABLE ( sentence ) { statements }
    (57) runfunction -> . VARIABLE ( sentence )

    }               shift and go to state 148
    VARIABLE        shift and go to state 15
    PRINT           shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    DEF             shift and go to state 22

    statement                      shift and go to state 23
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    modification                   shift and go to state 7
    iF                             shift and go to state 8
    whilE                          shift and go to state 9
    for                            shift and go to state 10
    break                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    runfunction                    shift and go to state 14

state 148

    (30) iF -> IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements } .

    VARIABLE        reduce using rule 30 (iF -> IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements } .)
    PRINT           reduce using rule 30 (iF -> IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements } .)
    IF              reduce using rule 30 (iF -> IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements } .)
    WHILE           reduce using rule 30 (iF -> IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements } .)
    FOR             reduce using rule 30 (iF -> IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements } .)
    BREAK           reduce using rule 30 (iF -> IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements } .)
    RETURN          reduce using rule 30 (iF -> IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements } .)
    DEF             reduce using rule 30 (iF -> IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements } .)
    $end            reduce using rule 30 (iF -> IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements } .)
    }               reduce using rule 30 (iF -> IF ( condition ) { statements } ELIF ( condition ) { statements } ELSE { statements } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 20 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 20 resolved as shift
WARNING: shift/reduce conflict for IF in state 20 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 20 resolved as shift
WARNING: shift/reduce conflict for FOR in state 20 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 20 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 20 resolved as shift
WARNING: shift/reduce conflict for DEF in state 20 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 33 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 33 resolved as shift
WARNING: shift/reduce conflict for IF in state 33 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 33 resolved as shift
WARNING: shift/reduce conflict for FOR in state 33 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 33 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 33 resolved as shift
WARNING: shift/reduce conflict for DEF in state 33 resolved as shift
WARNING: reduce/reduce conflict in state 36 resolved using rule (assignment -> VARIABLE = NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 36
